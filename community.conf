function lc_add_in(int ASN; int PeerType) -> bool {

    # Source
    if bgp_large_community !~ [(ASN_LOCAL, 110, *)] then {
        # UPSTREAM
        if (PeerType=1) then bgp_large_community.add((ASN_LOCAL, 110, 1));
        # DOWNSTREAM
        else if (PeerType=2) then bgp_large_community.add((ASN_LOCAL, 110, 2));
        # IX ROUTE SERVER
        else if (PeerType=3) then bgp_large_community.add((ASN_LOCAL, 110, 3));
        # PEER
        else if (PeerType=4) then bgp_large_community.add((ASN_LOCAL, 110, 4));
    }

    # ASN
    if bgp_large_community !~ [(ASN_LOCAL, 111, *)] then bgp_large_community.add((ASN_LOCAL, 111, ASN));
    
    # PoP
    if bgp_large_community !~ [(ASN_LOCAL, 112, *)] then bgp_large_community.add((ASN_LOCAL, 112, POP_LOCAL));

    # Country
    if bgp_large_community !~ [(ASN_LOCAL, 113, *)] then bgp_large_community.add((ASN_LOCAL, 113, POP_COUNTRY));

    # Region
    if bgp_large_community !~ [(ASN_LOCAL, 114, *)] then bgp_large_community.add((ASN_LOCAL, 114, POP_REGION));

    return true;
}

function lc_prepend(int ASN) -> bool {

    # Prepend 1x
    if (ASN_LOCAL, 901, ASN) ~ bgp_large_community then {
        bgp_path.prepend(ASN);
    }

    # Prepend 2x
    if (ASN_LOCAL, 902, ASN) ~ bgp_large_community then {
        bgp_path.prepend(ASN);
        bgp_path.prepend(ASN);
    } 

    # Prepend 3x
    if (ASN_LOCAL, 903, ASN) ~ bgp_large_community then {
        bgp_path.prepend(ASN);
        bgp_path.prepend(ASN);
        bgp_path.prepend(ASN);
    } 

    return true;
}

function lc_forbidden(int ASN) -> bool {

    # PoP
    if (ASN_LOCAL, 992, POP_LOCAL) ~ bgp_large_community then return false;

    # Country
    if (ASN_LOCAL, 993, POP_COUNTRY) ~ bgp_large_community then return false;

    # Region
    if (ASN_LOCAL, 994, POP_REGION) ~ bgp_large_community then return false;

    # ASN
    if (ASN_LOCAL, 999, ASN) ~ bgp_large_community then return false;

    return true;
}

function lc_export(int ASN) -> bool {

    # Prepend
    lc_prepend(ASN);

    # No Export
    lc_forbidden(ASN);

    # Local Export Configuration
    local_export_config();

    return true;
}
