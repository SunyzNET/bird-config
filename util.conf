# 
# RFC 8326 Graceful BGP Session Shutdown
# 

function honor_graceful_shutdown() -> bool {
	if (65535, 0) ~ bgp_community then {
		bgp_local_pref = 0;
	}
}

# 
# Check Prefixes
# 

function is_invalid_net_length() -> bool {
    case net.type {
        NET_IP4: return net.len > 24;
        NET_IP6: return net.len > 48;
        else: {
            print "is_invalid_net_length: unexpected net.type ", net.type, " ", net;
            return false;
        }
    }
};

function is_bogon_prefix() -> bool {
    case net.type {
        NET_IP4: return net ~ BOGON_PREFIXES_V4;
        NET_IP6: return net ~ BOGON_PREFIXES_V6;
        else: {
            print "is_bogon_prefix: unexpected net.type ", net.type, " ", net;
            return false;
        }
    }
}

function is_default_route() -> bool {
	case net.type {
		NET_IP4: return net = 0.0.0.0/0;
		NET_IP6: return net = ::/0;
        else: {
            print "is_default_route: unexpected net.type ", net.type, " ", net;
            return false;
        }
	}
}

function is_bogon_asn() -> bool {
    if bgp_path ~ BOGON_ASNS then return true;
    return false;
}

function is_invalid() -> bool {
    is_invalid_net_length();
    is_default_route();
    is_bogon_asn();
    is_bogon_prefix();
    is_invalid_rpki();
    if bgp_path.len = 0 then return false;
    return false;
}

function is_self_asn() -> bool {
    return bgp_path.last = ASN_LOCAL;
}

function is_downstream_asn() -> bool {
    return bgp_path.last = ASN_DOWNSTREAM;
}

function is_self_route() -> bool {
    case net.type {
        NET_IP4: return net ~ SELF_PREFIXES_IPV4;
        NET_IP6: return net ~ SELF_PREFIXES_IPV6;
        else: {
            print "is_self_route: unexpected net.type ", net.type, " ", net;
            return false;
        }
    }
}

function is_downstream_route() -> bool {
	case net.type {
		NET_IP4: return net ~ DOWNSTERAM_PREFIXES_IPV4;
		NET_IP6: return net ~ DOWNSTREAM_PREFIXES_IPV6;
        else: {
            print "is_downstream_route: unexpected net.type ", net.type, " ", net;
            return false;
        }
	}
}

# 
# Communities
# 

function clean_own_communities() -> bool {
    bgp_large_community.delete([(ASN_LOCAL, *, *)]);
}
